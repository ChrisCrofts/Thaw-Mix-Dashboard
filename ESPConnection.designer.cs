#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Thaw_Mix_Dashboard
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ContainerManagement-ODS")]
	public partial class ESPConnectionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRoutedContainer(RoutedContainer instance);
    partial void UpdateRoutedContainer(RoutedContainer instance);
    partial void DeleteRoutedContainer(RoutedContainer instance);
    partial void InsertOrderedTest(OrderedTest instance);
    partial void UpdateOrderedTest(OrderedTest instance);
    partial void DeleteOrderedTest(OrderedTest instance);
    partial void InsertContainer_OrderedTest(Container_OrderedTest instance);
    partial void UpdateContainer_OrderedTest(Container_OrderedTest instance);
    partial void DeleteContainer_OrderedTest(Container_OrderedTest instance);
    #endregion
		
		public ESPConnectionDataContext() : 
				base(global::Thaw_Mix_Dashboard.Properties.Settings.Default.ContainerManagement_ODSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ESPConnectionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ESPConnectionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ESPConnectionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ESPConnectionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<RoutedContainer> RoutedContainers
		{
			get
			{
				return this.GetTable<RoutedContainer>();
			}
		}
		
		public System.Data.Linq.Table<OrderedTest> OrderedTests
		{
			get
			{
				return this.GetTable<OrderedTest>();
			}
		}
		
		public System.Data.Linq.Table<Container_OrderedTest> Container_OrderedTests
		{
			get
			{
				return this.GetTable<Container_OrderedTest>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Container.RoutedContainer")]
	public partial class RoutedContainer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ContainerId;
		
		private long _TrackingNumber;
		
		private bool _IsStandardContainer;
		
		private System.Nullable<int> _StorageCodeId;
		
		private int _TemperatureId;
		
		private int _ContainerTypeId;
		
		private System.DateTime _ContainerCreatedWhen;
		
		private int _ContainerCreatedBy;
		
		private System.Nullable<long> _BagId;
		
		private bool _IsExtraContainer;
		
		private bool _IsForcedAliquotContainer;
		
		private bool _IsAliquot;
		
		private long _EncounterId;
		
		private System.Nullable<long> _ReplacementContainerId;
		
		private bool _IsRubberBandContainer;
		
		private System.Data.Linq.Binary _RowVersionId;
		
		private string _ContainerTubeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContainerIdChanging(long value);
    partial void OnContainerIdChanged();
    partial void OnTrackingNumberChanging(long value);
    partial void OnTrackingNumberChanged();
    partial void OnIsStandardContainerChanging(bool value);
    partial void OnIsStandardContainerChanged();
    partial void OnStorageCodeIdChanging(System.Nullable<int> value);
    partial void OnStorageCodeIdChanged();
    partial void OnTemperatureIdChanging(int value);
    partial void OnTemperatureIdChanged();
    partial void OnContainerTypeIdChanging(int value);
    partial void OnContainerTypeIdChanged();
    partial void OnContainerCreatedWhenChanging(System.DateTime value);
    partial void OnContainerCreatedWhenChanged();
    partial void OnContainerCreatedByChanging(int value);
    partial void OnContainerCreatedByChanged();
    partial void OnBagIdChanging(System.Nullable<long> value);
    partial void OnBagIdChanged();
    partial void OnIsExtraContainerChanging(bool value);
    partial void OnIsExtraContainerChanged();
    partial void OnIsForcedAliquotContainerChanging(bool value);
    partial void OnIsForcedAliquotContainerChanged();
    partial void OnIsAliquotChanging(bool value);
    partial void OnIsAliquotChanged();
    partial void OnEncounterIdChanging(long value);
    partial void OnEncounterIdChanged();
    partial void OnReplacementContainerIdChanging(System.Nullable<long> value);
    partial void OnReplacementContainerIdChanged();
    partial void OnIsRubberBandContainerChanging(bool value);
    partial void OnIsRubberBandContainerChanged();
    partial void OnRowVersionIdChanging(System.Data.Linq.Binary value);
    partial void OnRowVersionIdChanged();
    partial void OnContainerTubeTypeChanging(string value);
    partial void OnContainerTubeTypeChanged();
    #endregion
		
		public RoutedContainer()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainerId", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public long ContainerId
		{
			get
			{
				return this._ContainerId;
			}
			set
			{
				if ((this._ContainerId != value))
				{
					this.OnContainerIdChanging(value);
					this.SendPropertyChanging();
					this._ContainerId = value;
					this.SendPropertyChanged("ContainerId");
					this.OnContainerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrackingNumber", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long TrackingNumber
		{
			get
			{
				return this._TrackingNumber;
			}
			set
			{
				if ((this._TrackingNumber != value))
				{
					this.OnTrackingNumberChanging(value);
					this.SendPropertyChanging();
					this._TrackingNumber = value;
					this.SendPropertyChanged("TrackingNumber");
					this.OnTrackingNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsStandardContainer", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsStandardContainer
		{
			get
			{
				return this._IsStandardContainer;
			}
			set
			{
				if ((this._IsStandardContainer != value))
				{
					this.OnIsStandardContainerChanging(value);
					this.SendPropertyChanging();
					this._IsStandardContainer = value;
					this.SendPropertyChanged("IsStandardContainer");
					this.OnIsStandardContainerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StorageCodeId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> StorageCodeId
		{
			get
			{
				return this._StorageCodeId;
			}
			set
			{
				if ((this._StorageCodeId != value))
				{
					this.OnStorageCodeIdChanging(value);
					this.SendPropertyChanging();
					this._StorageCodeId = value;
					this.SendPropertyChanged("StorageCodeId");
					this.OnStorageCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemperatureId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TemperatureId
		{
			get
			{
				return this._TemperatureId;
			}
			set
			{
				if ((this._TemperatureId != value))
				{
					this.OnTemperatureIdChanging(value);
					this.SendPropertyChanging();
					this._TemperatureId = value;
					this.SendPropertyChanged("TemperatureId");
					this.OnTemperatureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainerTypeId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ContainerTypeId
		{
			get
			{
				return this._ContainerTypeId;
			}
			set
			{
				if ((this._ContainerTypeId != value))
				{
					this.OnContainerTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ContainerTypeId = value;
					this.SendPropertyChanged("ContainerTypeId");
					this.OnContainerTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainerCreatedWhen", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime ContainerCreatedWhen
		{
			get
			{
				return this._ContainerCreatedWhen;
			}
			set
			{
				if ((this._ContainerCreatedWhen != value))
				{
					this.OnContainerCreatedWhenChanging(value);
					this.SendPropertyChanging();
					this._ContainerCreatedWhen = value;
					this.SendPropertyChanged("ContainerCreatedWhen");
					this.OnContainerCreatedWhenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainerCreatedBy", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ContainerCreatedBy
		{
			get
			{
				return this._ContainerCreatedBy;
			}
			set
			{
				if ((this._ContainerCreatedBy != value))
				{
					this.OnContainerCreatedByChanging(value);
					this.SendPropertyChanging();
					this._ContainerCreatedBy = value;
					this.SendPropertyChanged("ContainerCreatedBy");
					this.OnContainerCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BagId", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> BagId
		{
			get
			{
				return this._BagId;
			}
			set
			{
				if ((this._BagId != value))
				{
					this.OnBagIdChanging(value);
					this.SendPropertyChanging();
					this._BagId = value;
					this.SendPropertyChanged("BagId");
					this.OnBagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsExtraContainer", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsExtraContainer
		{
			get
			{
				return this._IsExtraContainer;
			}
			set
			{
				if ((this._IsExtraContainer != value))
				{
					this.OnIsExtraContainerChanging(value);
					this.SendPropertyChanging();
					this._IsExtraContainer = value;
					this.SendPropertyChanged("IsExtraContainer");
					this.OnIsExtraContainerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsForcedAliquotContainer", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsForcedAliquotContainer
		{
			get
			{
				return this._IsForcedAliquotContainer;
			}
			set
			{
				if ((this._IsForcedAliquotContainer != value))
				{
					this.OnIsForcedAliquotContainerChanging(value);
					this.SendPropertyChanging();
					this._IsForcedAliquotContainer = value;
					this.SendPropertyChanged("IsForcedAliquotContainer");
					this.OnIsForcedAliquotContainerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAliquot", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsAliquot
		{
			get
			{
				return this._IsAliquot;
			}
			set
			{
				if ((this._IsAliquot != value))
				{
					this.OnIsAliquotChanging(value);
					this.SendPropertyChanging();
					this._IsAliquot = value;
					this.SendPropertyChanged("IsAliquot");
					this.OnIsAliquotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EncounterId", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long EncounterId
		{
			get
			{
				return this._EncounterId;
			}
			set
			{
				if ((this._EncounterId != value))
				{
					this.OnEncounterIdChanging(value);
					this.SendPropertyChanging();
					this._EncounterId = value;
					this.SendPropertyChanged("EncounterId");
					this.OnEncounterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReplacementContainerId", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> ReplacementContainerId
		{
			get
			{
				return this._ReplacementContainerId;
			}
			set
			{
				if ((this._ReplacementContainerId != value))
				{
					this.OnReplacementContainerIdChanging(value);
					this.SendPropertyChanging();
					this._ReplacementContainerId = value;
					this.SendPropertyChanged("ReplacementContainerId");
					this.OnReplacementContainerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRubberBandContainer", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsRubberBandContainer
		{
			get
			{
				return this._IsRubberBandContainer;
			}
			set
			{
				if ((this._IsRubberBandContainer != value))
				{
					this.OnIsRubberBandContainerChanging(value);
					this.SendPropertyChanging();
					this._IsRubberBandContainer = value;
					this.SendPropertyChanged("IsRubberBandContainer");
					this.OnIsRubberBandContainerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowVersionId", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RowVersionId
		{
			get
			{
				return this._RowVersionId;
			}
			set
			{
				if ((this._RowVersionId != value))
				{
					this.OnRowVersionIdChanging(value);
					this.SendPropertyChanging();
					this._RowVersionId = value;
					this.SendPropertyChanged("RowVersionId");
					this.OnRowVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainerTubeType", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string ContainerTubeType
		{
			get
			{
				return this._ContainerTubeType;
			}
			set
			{
				if ((this._ContainerTubeType != value))
				{
					this.OnContainerTubeTypeChanging(value);
					this.SendPropertyChanging();
					this._ContainerTubeType = value;
					this.SendPropertyChanged("ContainerTubeType");
					this.OnContainerTubeTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Orders.OrderedTest")]
	public partial class OrderedTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OrderedTestId;
		
		private string _AccessionNumber;
		
		private System.Nullable<long> _LisOrderedTestId;
		
		private long _OrderableTestId;
		
		private long _EncounterId;
		
		private System.Nullable<System.DateTime> _CreatedWhen;
		
		private System.Nullable<System.DateTime> _ShiftedPartitionsWhen;
		
		private int _ShiftedPartitionsCount;
		
		private System.Data.Linq.Binary _RowVersionId;
		
		private System.Nullable<int> _LisStatusCodeId;
		
		private System.Nullable<int> _OrderedTestStateId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderedTestIdChanging(long value);
    partial void OnOrderedTestIdChanged();
    partial void OnAccessionNumberChanging(string value);
    partial void OnAccessionNumberChanged();
    partial void OnLisOrderedTestIdChanging(System.Nullable<long> value);
    partial void OnLisOrderedTestIdChanged();
    partial void OnOrderableTestIdChanging(long value);
    partial void OnOrderableTestIdChanged();
    partial void OnEncounterIdChanging(long value);
    partial void OnEncounterIdChanged();
    partial void OnCreatedWhenChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedWhenChanged();
    partial void OnShiftedPartitionsWhenChanging(System.Nullable<System.DateTime> value);
    partial void OnShiftedPartitionsWhenChanged();
    partial void OnShiftedPartitionsCountChanging(int value);
    partial void OnShiftedPartitionsCountChanged();
    partial void OnRowVersionIdChanging(System.Data.Linq.Binary value);
    partial void OnRowVersionIdChanged();
    partial void OnLisStatusCodeIdChanging(System.Nullable<int> value);
    partial void OnLisStatusCodeIdChanged();
    partial void OnOrderedTestStateIdChanging(System.Nullable<int> value);
    partial void OnOrderedTestStateIdChanged();
    #endregion
		
		public OrderedTest()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderedTestId", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public long OrderedTestId
		{
			get
			{
				return this._OrderedTestId;
			}
			set
			{
				if ((this._OrderedTestId != value))
				{
					this.OnOrderedTestIdChanging(value);
					this.SendPropertyChanging();
					this._OrderedTestId = value;
					this.SendPropertyChanged("OrderedTestId");
					this.OnOrderedTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessionNumber", DbType="VarChar(11) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string AccessionNumber
		{
			get
			{
				return this._AccessionNumber;
			}
			set
			{
				if ((this._AccessionNumber != value))
				{
					this.OnAccessionNumberChanging(value);
					this.SendPropertyChanging();
					this._AccessionNumber = value;
					this.SendPropertyChanged("AccessionNumber");
					this.OnAccessionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LisOrderedTestId", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> LisOrderedTestId
		{
			get
			{
				return this._LisOrderedTestId;
			}
			set
			{
				if ((this._LisOrderedTestId != value))
				{
					this.OnLisOrderedTestIdChanging(value);
					this.SendPropertyChanging();
					this._LisOrderedTestId = value;
					this.SendPropertyChanged("LisOrderedTestId");
					this.OnLisOrderedTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderableTestId", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long OrderableTestId
		{
			get
			{
				return this._OrderableTestId;
			}
			set
			{
				if ((this._OrderableTestId != value))
				{
					this.OnOrderableTestIdChanging(value);
					this.SendPropertyChanging();
					this._OrderableTestId = value;
					this.SendPropertyChanged("OrderableTestId");
					this.OnOrderableTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EncounterId", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long EncounterId
		{
			get
			{
				return this._EncounterId;
			}
			set
			{
				if ((this._EncounterId != value))
				{
					this.OnEncounterIdChanging(value);
					this.SendPropertyChanging();
					this._EncounterId = value;
					this.SendPropertyChanged("EncounterId");
					this.OnEncounterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedWhen", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreatedWhen
		{
			get
			{
				return this._CreatedWhen;
			}
			set
			{
				if ((this._CreatedWhen != value))
				{
					this.OnCreatedWhenChanging(value);
					this.SendPropertyChanging();
					this._CreatedWhen = value;
					this.SendPropertyChanged("CreatedWhen");
					this.OnCreatedWhenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShiftedPartitionsWhen", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ShiftedPartitionsWhen
		{
			get
			{
				return this._ShiftedPartitionsWhen;
			}
			set
			{
				if ((this._ShiftedPartitionsWhen != value))
				{
					this.OnShiftedPartitionsWhenChanging(value);
					this.SendPropertyChanging();
					this._ShiftedPartitionsWhen = value;
					this.SendPropertyChanged("ShiftedPartitionsWhen");
					this.OnShiftedPartitionsWhenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShiftedPartitionsCount", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ShiftedPartitionsCount
		{
			get
			{
				return this._ShiftedPartitionsCount;
			}
			set
			{
				if ((this._ShiftedPartitionsCount != value))
				{
					this.OnShiftedPartitionsCountChanging(value);
					this.SendPropertyChanging();
					this._ShiftedPartitionsCount = value;
					this.SendPropertyChanged("ShiftedPartitionsCount");
					this.OnShiftedPartitionsCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowVersionId", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RowVersionId
		{
			get
			{
				return this._RowVersionId;
			}
			set
			{
				if ((this._RowVersionId != value))
				{
					this.OnRowVersionIdChanging(value);
					this.SendPropertyChanging();
					this._RowVersionId = value;
					this.SendPropertyChanged("RowVersionId");
					this.OnRowVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LisStatusCodeId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> LisStatusCodeId
		{
			get
			{
				return this._LisStatusCodeId;
			}
			set
			{
				if ((this._LisStatusCodeId != value))
				{
					this.OnLisStatusCodeIdChanging(value);
					this.SendPropertyChanging();
					this._LisStatusCodeId = value;
					this.SendPropertyChanged("LisStatusCodeId");
					this.OnLisStatusCodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderedTestStateId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> OrderedTestStateId
		{
			get
			{
				return this._OrderedTestStateId;
			}
			set
			{
				if ((this._OrderedTestStateId != value))
				{
					this.OnOrderedTestStateIdChanging(value);
					this.SendPropertyChanging();
					this._OrderedTestStateId = value;
					this.SendPropertyChanged("OrderedTestStateId");
					this.OnOrderedTestStateIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Container.Container_OrderedTest")]
	public partial class Container_OrderedTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ContainerId;
		
		private long _OrderedTestId;
		
		private bool _IsActive;
		
		private System.Data.Linq.Binary _RowVersionId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContainerIdChanging(long value);
    partial void OnContainerIdChanged();
    partial void OnOrderedTestIdChanging(long value);
    partial void OnOrderedTestIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnRowVersionIdChanging(System.Data.Linq.Binary value);
    partial void OnRowVersionIdChanged();
    #endregion
		
		public Container_OrderedTest()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainerId", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public long ContainerId
		{
			get
			{
				return this._ContainerId;
			}
			set
			{
				if ((this._ContainerId != value))
				{
					this.OnContainerIdChanging(value);
					this.SendPropertyChanging();
					this._ContainerId = value;
					this.SendPropertyChanged("ContainerId");
					this.OnContainerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderedTestId", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public long OrderedTestId
		{
			get
			{
				return this._OrderedTestId;
			}
			set
			{
				if ((this._OrderedTestId != value))
				{
					this.OnOrderedTestIdChanging(value);
					this.SendPropertyChanging();
					this._OrderedTestId = value;
					this.SendPropertyChanged("OrderedTestId");
					this.OnOrderedTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowVersionId", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RowVersionId
		{
			get
			{
				return this._RowVersionId;
			}
			set
			{
				if ((this._RowVersionId != value))
				{
					this.OnRowVersionIdChanging(value);
					this.SendPropertyChanging();
					this._RowVersionId = value;
					this.SendPropertyChanged("RowVersionId");
					this.OnRowVersionIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
